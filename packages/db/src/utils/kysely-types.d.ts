/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ApplicationReplyType = "email" | "other" | "phone";

export type CandidateActivityCommentStatusEnum = "attempted" | "successful";

export type CandidateActivityCommentTypeEnum = "case-comment" | "comment" | "consultant-follow-up" | "recruitment-follow-up";

export type CandidateFileCategoryEnum = "cover_letter" | "other" | "resume";

export type CandidateStatus = "do_not_contact" | "not_currently_relevant" | "potentially_relevant" | "ready_for_interview";

export type CaseResult = "closed-no-loss" | "loss" | "win";

export type CaseState = "archived" | "closed" | "draft" | "ongoing" | "ready-to-close";

export type CaseSubType = "normal" | "over-recruit" | "pitch" | "spring";

export type CaseType = "candidate-service" | "interim" | "internal" | "recruitment";

export type ConsultantEmploymentType = "external-consultant" | "internal-consultant";

export type EmailStatus = "failed" | "queued" | "sent";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type InternalDepartmentType = "operations" | "sales";

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type KanbanStage = "booked_interview" | "client_short_list" | "contacted" | "interview_completed" | "long_list" | "placed" | "presented" | "short_list";

export type MeetingLocationEnum = "customer-office" | "other" | "our-office" | "video-call";

export type MeetingStatusEnum = "canceled" | "completed" | "no_show" | "scheduled";

export type MeetingTypeEnum = "champion" | "consultant-follow-up" | "interview" | "recruitment-follow-up";

export type Numeric = ColumnType<string, number | string, number | string>;

export type PointStatus = "no" | "removed" | "yes";

export type QuestionType = "boolean" | "nps" | "text";

export type SavedFilterType = "application" | "candidate" | "case" | "client" | "company" | "consultant";

export type SurveyStatus = "completed" | "failed" | "pending" | "sent";

export type SurveyType = "consultant_followup" | "post_interview";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "manager" | "team_manager" | "user";

export type UserType = "associate" | "consultant" | "manager" | "recruitment-assistant" | "researcher" | "senior-consultant" | "team-lead" | "unset";

export interface AdchaseJobPosts {
  adContactPerson: string | null;
  adContactPersonEmail: string | null;
  adContactPersonFirstname: string | null;
  adContactPersonFunction: string | null;
  adContactPersonLastname: string | null;
  adContactPersonPhone: string | null;
  adContactPersonSalutation: string | null;
  adContactPersonTitle: string | null;
  adId: string | null;
  branche: string | null;
  careerLevel: string | null;
  company: string | null;
  companyAddress: string | null;
  companyAddressNumber: string | null;
  companyCity: string | null;
  companyContactPersonEmail: string | null;
  companyContactPersonFirstname: string | null;
  companyContactPersonFunction: string | null;
  companyContactPersonLastname: string | null;
  companyContactPersonPhone: string | null;
  companyContactPersonSalutation: string | null;
  companyContactPersonTitle: string | null;
  companyCountry: string | null;
  companyEmail: string | null;
  companyEmployees: string | null;
  companyId: string | null;
  companyInternet: string | null;
  companyLatitude: Numeric | null;
  companyLink: string | null;
  companyLongitude: Numeric | null;
  companyPhone: string | null;
  companyPostalCode: string | null;
  companyReport: string | null;
  companyReportFlexible: string | null;
  companyReportGroup: string | null;
  companyReportGroupFlexible: string | null;
  companyReportGroupMedia: string | null;
  companyReportJobs: string | null;
  companyReportMedia: string | null;
  companySiret: string | null;
  createdAt: Generated<Timestamp>;
  date: Timestamp | null;
  dkz: string | null;
  duplicationCheckedJobs: Json | null;
  endClient: Generated<string | null>;
  endClientIndustry: Generated<string | null>;
  endClientUrlDomain: Generated<string | null>;
  id: Generated<number>;
  internLinkPdf: string | null;
  internLinkTxt: string | null;
  isRelevant: boolean | null;
  isRelevantReason: string | null;
  jobCategory: string[] | null;
  jobCategoryCode: string[] | null;
  jobId: string | null;
  jobPosition: string | null;
  kld5: string | null;
  link: string | null;
  listPrice: string | null;
  location: string | null;
  position: string | null;
  positionId: string | null;
  recruitmentAgency: Generated<string | null>;
  shortSummary: string | null;
  source: string | null;
  sourceText: string | null;
  systemsUsed: string | null;
  text: string | null;
  textEmbeddings: string | null;
  type: string | null;
  wz08: string | null;
}

export interface ApplicationReplies {
  applicationId: number | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  emailAttempt: Generated<number>;
  emailErrorCode: string | null;
  emailErrorMessage: string | null;
  emailFromCreator: Generated<boolean | null>;
  emailStatus: EmailStatus | null;
  id: Generated<number>;
  message: string | null;
  notes: string;
  sendAt: Timestamp | null;
  subject: string | null;
  type: ApplicationReplyType;
}

export interface ApplicationReplyTemplates {
  applicationId: number | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  id: Generated<number>;
  message: string;
  name: string;
  subject: string;
  updatedAt: Generated<Timestamp | null>;
  updatedByUserId: number | null;
}

export interface Applications {
  address: string | null;
  caseId: number | null;
  city: string | null;
  country: string | null;
  coverLetterFileId: string | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  email: string;
  firstName: string;
  fulltextVector: Generated<string | null>;
  handledAt: Timestamp | null;
  handledByUserId: number | null;
  id: Generated<number>;
  jobTitle: string | null;
  jobUrl: string | null;
  lastName: string;
  notes: string | null;
  permanentlyEmployed: Generated<boolean>;
  personId: number | null;
  phoneNumber: string | null;
  resumeFileId: string | null;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
  v1id: number | null;
  zipCode: string | null;
}

export interface Bankruptcies {
  bankruptcyStatusCode: string;
  companyId: number;
  courtCase: string | null;
  courtCode: string | null;
  courtEmail: string | null;
  courtName: string | null;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  initiatedAt: Timestamp;
  initiatedBy: string | null;
  repealedAt: Timestamp | null;
  terminatedAt: Timestamp | null;
  ticId: string;
  trusteeAddressCity: string | null;
  trusteeAddressPostalCode: string | null;
  trusteeAddressStreet: string | null;
  trusteeCo: string | null;
  trusteeName: string | null;
  updatedAt: Timestamp | null;
}

export interface CandidateActivities {
  candidateChangelogId: number | null;
  candidateCommentId: number | null;
  candidateMeetingId: number | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  id: Generated<number>;
  personId: number;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
}

export interface CandidateChangelogs {
  changes: Json;
  id: Generated<number>;
}

export interface CandidateComments {
  caseCandidateId: number | null;
  caseStage: KanbanStage | null;
  comment: Generated<string>;
  id: Generated<number>;
  status: CandidateActivityCommentStatusEnum | null;
  type: CandidateActivityCommentTypeEnum;
  v1ActivityId: number | null;
}

export interface CandidateCompanyRelations {
  candidateRelationTypeId: number;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  personId: number;
}

export interface CandidateFiles {
  category: Generated<CandidateFileCategoryEnum>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fileId: string;
  id: Generated<number>;
  personId: number;
  textContent: string | null;
  v1FileId: number | null;
}

export interface CandidateMeetings {
  bookedAt: Timestamp;
  bookedByDepartmentId: number | null;
  bookedByUserId: number;
  bookedNotes: Generated<string>;
  canceledAt: Timestamp | null;
  canceledNotes: Generated<string>;
  completedAt: Timestamp | null;
  completedNotes: Generated<string>;
  endsAt: Timestamp;
  id: Generated<number>;
  location: MeetingLocationEnum;
  responsibleRecruiterDepartmentId: number | null;
  responsibleRecruiterUserId: number;
  startsAt: Timestamp;
  status: MeetingStatusEnum;
  type: MeetingTypeEnum;
  v1ActivityId: number | null;
}

export interface CandidateReferences {
  caseId: number | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  id: Generated<number>;
  personId: number;
  reference: string;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
}

export interface CandidateRelationOwners {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  personId: number;
  userId: number;
}

export interface CandidateRelationTypes {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  name: string;
  v1Id: number | null;
}

export interface CandidateSources {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  name: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface CareerGoals {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  notes: string | null;
  personId: number;
  /**
   * Priority of the career goal, 1 being highest priority and 5 being lowest
   */
  priority: number;
  skillId: number;
  updatedAt: Generated<Timestamp>;
}

export interface CaseAccessGrants {
  caseId: number;
  grantedAt: Generated<Timestamp>;
  grantedByUserId: number;
  id: Generated<number>;
  userId: number;
}

export interface CaseCandidateHistory {
  caseCandidateId: number;
  changedAt: Generated<Timestamp>;
  changedBy: number;
  fromStage: KanbanStage | null;
  id: Generated<number>;
  toStage: KanbanStage;
}

export interface CaseCandidates {
  addedToKanbanStageAt: Generated<Timestamp>;
  alignmentWithRole: string | null;
  caseId: number;
  createdAt: Generated<Timestamp>;
  createdByUserId: number | null;
  /**
   * Reason for deactivation if the candidate is no longer being considered
   */
  dropoutReason: string | null;
  educationJustification: string | null;
  educationRating: number | null;
  experienceJustification: string | null;
  experienceRating: number | null;
  id: Generated<number>;
  industryMatch: string | null;
  /**
   * Indicates whether the candidate is still actively considered for the case
   */
  isActive: Generated<boolean>;
  kanbanStage: KanbanStage;
  notes: string | null;
  /**
   * Determines the order of candidates within a stage
   */
  orderIndex: Generated<number>;
  personId: number;
  responsibilitiesJustification: string | null;
  responsibilitiesRating: number | null;
  skillsQualificationsJustification: string | null;
  skillsQualificationsRating: number | null;
  softSkillsJustification: string | null;
  softSkillsRating: number | null;
  updatedAt: Timestamp | null;
  v1Id: number | null;
}

export interface CaseRequirements {
  caseId: number;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  notes: string | null;
  requirementType: string | null;
  skillId: number;
  updatedAt: Generated<Timestamp>;
  yearsOfExperience: number | null;
}

export interface Cases {
  clientResponsibleTwoUserId: number | null;
  clientResponsibleUserId: number | null;
  closedAt: Timestamp | null;
  commentEconomy: string | null;
  commentOutcome: string | null;
  companyId: number;
  consultantContractToHire: Generated<boolean>;
  consultantEmploymentType: ConsultantEmploymentType | null;
  consultantOwnerUserId: number | null;
  consultantViaBroker: Generated<boolean>;
  contactCompanyManagerId: number | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  endDate: Timestamp | null;
  fulltextVector: Generated<string | null>;
  id: Generated<number>;
  intake: string | null;
  intakeAt: Timestamp | null;
  internalDepartmentId: number;
  internalProjectId: string | null;
  isConfidential: Generated<boolean>;
  isExclusive: Generated<boolean>;
  jobAd: string | null;
  leadGeneratorUserId: number | null;
  notes: Generated<string>;
  ownerUserId: number;
  pointStatus: Generated<PointStatus | null>;
  prognosisCloseDate: Timestamp | null;
  prognosisConsultantAssignmentMonths: number | null;
  prognosisConsultantFeeMax: number | null;
  prognosisConsultantFeeMin: number | null;
  prognosisConsultantFtePercentage: number | null;
  prognosisEndDate: Timestamp | null;
  prognosisRecruitmentValue: number | null;
  prognosisWinProbability: number | null;
  recruitmentIsGuaranteedRecruitment: Generated<boolean>;
  result: CaseResult | null;
  resultUnitId: number | null;
  salesPitch: Generated<string>;
  sendCustomerSurvey: Generated<boolean>;
  startDate: Timestamp | null;
  state: Generated<CaseState>;
  subType: CaseSubType | null;
  suitableForRoleOptionsV1Id: number | null;
  title: Generated<string>;
  type: CaseType | null;
  updatedAt: Generated<Timestamp>;
  v1CaseValues: Json | null;
  v1Id: number | null;
  v1IntakeFieldValues: Json | null;
  workplaceAddress: string | null;
}

export interface CasesWithPrognosisValueAndPrio {
  clientResponsibleTwoUserId: number | null;
  clientResponsibleUserId: number | null;
  closedAt: Timestamp | null;
  commentEconomy: string | null;
  commentOutcome: string | null;
  companyId: number | null;
  consultantContractToHire: boolean | null;
  consultantEmploymentType: ConsultantEmploymentType | null;
  consultantOwnerUserId: number | null;
  consultantViaBroker: boolean | null;
  contactCompanyManagerId: number | null;
  createdAt: Timestamp | null;
  createdByUserId: number | null;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  endDate: Timestamp | null;
  fulltextVector: string | null;
  id: number | null;
  intake: string | null;
  intakeAt: Timestamp | null;
  internalDepartmentId: number | null;
  internalProjectId: string | null;
  isConfidential: boolean | null;
  isExclusive: boolean | null;
  jobAd: string | null;
  leadGeneratorUserId: number | null;
  notes: string | null;
  ownerUserId: number | null;
  pointStatus: PointStatus | null;
  prognosisCloseDate: Timestamp | null;
  prognosisConsultantAssignmentMonths: number | null;
  prognosisConsultantFeeMax: number | null;
  prognosisConsultantFeeMin: number | null;
  prognosisConsultantFtePercentage: number | null;
  prognosisEndDate: Timestamp | null;
  prognosisPrio: number | null;
  prognosisRecruitmentValue: number | null;
  prognosisValue: number | null;
  prognosisWinProbability: number | null;
  recruitmentIsGuaranteedRecruitment: boolean | null;
  result: CaseResult | null;
  resultUnitId: number | null;
  salesPitch: string | null;
  sendCustomerSurvey: boolean | null;
  startDate: Timestamp | null;
  state: CaseState | null;
  subType: CaseSubType | null;
  suitableForRoleOptionsV1Id: number | null;
  title: string | null;
  type: CaseType | null;
  updatedAt: Timestamp | null;
  v1CaseValues: Json | null;
  v1Id: number | null;
  v1IntakeFieldValues: Json | null;
  workplaceAddress: string | null;
}

export interface Companies {
  address: string | null;
  city: string | null;
  countryCode: Generated<string | null>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  environment: string | null;
  fulltextVector: Generated<string | null>;
  hubspotId: Int8 | null;
  id: Generated<number>;
  industry: string | null;
  language: string | null;
  linkedinUrl: string | null;
  name: string;
  notes: string | null;
  nrOfEmployees: number | null;
  ownership: string | null;
  phoneNumber: string | null;
  registrationNumber: string | null;
  /**
   * Revenue in thousands of SEK
   */
  revenue: number | null;
  ticId: number | null;
  updatedAt: Generated<Timestamp>;
  v1ClientId: number | null;
  website: string | null;
  zipCode: string | null;
}

export interface CompanyManagers {
  companyId: number;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  directNumber: string | null;
  email: string | null;
  firstName: string | null;
  hubspotId: Int8 | null;
  id: Generated<number>;
  lastName: string | null;
  managing: string | null;
  mobileNumber: string | null;
  note: string | null;
  ownerId: number | null;
  status: number | null;
  title: string | null;
  updatedAt: Timestamp | null;
  v1ManagerId: number | null;
}

export interface Education {
  activitiesAndSocieties: string | null;
  degreeName: Generated<string>;
  description: Generated<string>;
  endsAt: Timestamp | null;
  fieldOfStudy: Generated<string>;
  grade: Generated<string>;
  id: Generated<number>;
  imageFileId: string | null;
  personId: number;
  schoolLinkedinProfileUrl: string | null;
  schoolName: Generated<string>;
  startsAt: Timestamp | null;
}

export interface Experiences {
  companyId: number | null;
  companyLinkedinProfileUrl: string | null;
  companyName: Generated<string>;
  description: Generated<string>;
  endsAt: Timestamp | null;
  id: Generated<number>;
  imageFileId: string | null;
  jobTitle: Generated<string>;
  location: Generated<string>;
  personId: number;
  roleId: number | null;
  startsAt: Timestamp | null;
}

export interface Files {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  mimeType: string | null;
  name: string | null;
  size: number | null;
  uploadedByUserId: number | null;
}

export interface InternalDepartments {
  id: Generated<number>;
  name: string;
  shortName: string | null;
  statsCaseRelevant: Generated<boolean>;
  statsKpiRelevant: Generated<boolean>;
  statsPointRelevant: Generated<boolean>;
  type: InternalDepartmentType | null;
  v1GroupId: string | null;
}

export interface InterviewTranscriptions {
  audioFileId: string | null;
  createdAt: Generated<Timestamp>;
  gladiaPostProcessTranscriptionId: string | null;
  id: Generated<number>;
  initialAiSummary: string | null;
  jsonbGladiaPostProcessed: Json | null;
  meetingBaasPostProcessedData: Json | null;
  meetingBotId: string | null;
  /**
   * Optional meeting URL for video calls
   */
  meetingUrl: string | null;
  personId: number;
  textDeepgramLive: Generated<string>;
  textGladaLive: Generated<string>;
  textGladaPostProcessed: Generated<string>;
  updatedAt: Generated<Timestamp>;
  userId: number;
  videoFileId: string | null;
}

export interface Kpis {
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  id: Generated<number>;
  internalDepartmentId: number | null;
  notes: string | null;
  readableType: string;
  sourceId: string;
  sourceType: string;
  type: number;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
  userId: number;
  v1Id: number | null;
}

export interface Meta {
  key: string;
  updatedAt: Generated<Timestamp>;
  value: Json;
}

export interface OptionsV1 {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  name: string;
  orderIndex: Generated<number>;
  parentId: number | null;
  type: string;
  updatedAt: Generated<Timestamp>;
}

export interface People {
  address: Generated<string>;
  candidateAvailableAt: Timestamp | null;
  candidateAvailableAtEffective: Generated<Timestamp | null>;
  candidateDontContact: Generated<boolean>;
  candidateHotUntil: Timestamp | null;
  candidateInterimManagementRateSpanHigh: number | null;
  candidateInterimManagementRateSpanHighEffective: Generated<number | null>;
  candidateInterimManagementRateSpanLow: number | null;
  candidateInterimManagementRateSpanLowEffective: Generated<number | null>;
  candidateInterimRateSpanHigh: number | null;
  candidateInterimRateSpanLow: number | null;
  candidateIsOpenToInterim: Generated<boolean>;
  candidateIsOpenToInterimManagement: Generated<boolean>;
  candidateIsOpenToRecruitment: Generated<boolean>;
  candidateIsPartTimeAvailable: Generated<boolean>;
  /**
   * Kept in sync by application code, used to list and sort candidates
   */
  candidateLatestActivityAt: Timestamp | null;
  /**
   * Kept in sync by application code, used to list and sort candidates
   */
  candidateLatestAttemptedAt: Timestamp | null;
  candidateNewOpportunities: Generated<boolean>;
  candidateNextContactAt: Timestamp | null;
  candidateNotesApplication: Generated<string>;
  candidateNotesBackground: Generated<string>;
  candidateNotesFuturePlan: Generated<string>;
  candidateNotesGeneral: Generated<string>;
  candidateNotesPersonality: Generated<string>;
  candidateNotesSendTip: Generated<string>;
  candidateNotesSummary: Generated<string>;
  candidateNotesWorkExperience: Generated<string>;
  candidateNoticePeriodInMonths: number | null;
  candidatePartTimePercentage: number | null;
  candidatePermanentlyEmployed: Generated<boolean>;
  candidateRating: number | null;
  candidateRatingEffective: Generated<number | null>;
  candidateRecruitmentRateSpanHigh: number | null;
  candidateRecruitmentRateSpanHighEffective: Generated<number | null>;
  candidateRecruitmentRateSpanLow: number | null;
  candidateRecruitmentRateSpanLowEffective: Generated<number | null>;
  candidateSourceId: number | null;
  candidateStatusCode: CandidateStatus | null;
  candidateSuitableForOptionV1Id: number | null;
  candidateSuitableForRoleId: number | null;
  candidateV1Id: number | null;
  city: Generated<string>;
  countryCode: Generated<string | null>;
  createdAt: Generated<Timestamp>;
  dateOfBirth: Timestamp | null;
  deletedAt: Timestamp | null;
  dontContact: Generated<boolean>;
  email: string | null;
  firstName: string;
  fulltextVector: Generated<string | null>;
  hubspotContactId: Generated<Int8 | null>;
  hubspotUrl: string | null;
  id: Generated<number>;
  imageFileId: string | null;
  lastName: Generated<string>;
  linkedinId: Generated<string | null>;
  linkedinRawData: Json | null;
  linkedinUrl: string | null;
  phoneNumber: string | null;
  updatedAt: Timestamp | null;
  zipCode: Generated<string>;
}

export interface PersonOptionsV1 {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  optionV1Id: number;
  personId: number;
  pivotCategory: string | null;
  updatedAt: Timestamp | null;
}

export interface PersonSkills {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  notes: string | null;
  personId: number;
  skillId: number;
  updatedAt: Generated<Timestamp>;
  yearsOfExperience: number | null;
}

export interface PointGoals {
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  goal: number;
  id: Generated<number>;
  internalDepartmentId: number;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
  validFrom: Timestamp;
}

export interface ResultUnits {
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  description: string | null;
  id: Generated<number>;
  name: string;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
}

export interface ResumeEducationExperiences {
  current: Generated<boolean>;
  degreeName: string;
  description: string;
  endsAt: Timestamp | null;
  id: Generated<number>;
  resumeId: number;
  schoolName: string;
  startsAt: Timestamp | null;
}

export interface Resumes {
  city: Generated<string>;
  country: Generated<string>;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  email: Generated<string | null>;
  id: Generated<number>;
  name: Generated<string>;
  personId: number;
  phoneNumber: string | null;
  profile: Generated<string>;
  resumeName: Generated<string>;
  showProfilePicture: Generated<boolean>;
  title: Generated<string>;
  updatedAt: Generated<Timestamp>;
  updatedByUserId: number;
}

export interface ResumeWorkExperiences {
  companyName: string;
  description: string;
  endsAt: Timestamp | null;
  id: Generated<number>;
  jobTitle: string;
  location: Generated<string>;
  resumeId: number;
  startsAt: Timestamp | null;
}

export interface Roles {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  name: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface SavedFilters {
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  deletedAt: Timestamp | null;
  deletedByUserId: number | null;
  filters: Json;
  id: Generated<number>;
  isDefault: Generated<boolean>;
  name: string;
  sharedByUserId: number | null;
  type: SavedFilterType;
  updatedAt: Timestamp | null;
  updatedByUserId: number | null;
  userId: number;
}

export interface SkillCategories {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  name: string;
  /**
   * URL-friendly identifier for the category, used for frontend routing and API endpoints
   */
  slug: string;
  updatedAt: Generated<Timestamp>;
}

export interface Skills {
  categoryId: number;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  name: string;
  updatedAt: Generated<Timestamp>;
}

export interface SurveyQuestionResponses {
  answeredAt: Timestamp | null;
  booleanResponse: boolean | null;
  createdAt: Generated<Timestamp>;
  displayOrder: number;
  id: Generated<number>;
  isRequired: Generated<boolean>;
  numericResponse: number | null;
  questionId: number | null;
  responseIpAddress: string | null;
  responseUserAgent: string | null;
  surveyId: number | null;
  textResponse: string | null;
}

export interface SurveyQuestions {
  createdAt: Generated<Timestamp>;
  displayOrder: Generated<number>;
  id: Generated<number>;
  isActive: Generated<boolean>;
  isRequired: Generated<boolean>;
  label: string;
  maxValue: number | null;
  minValue: number | null;
  surveyType: SurveyType;
  type: QuestionType;
  updatedAt: Generated<Timestamp>;
}

export interface Surveys {
  candidateMeetingId: number | null;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  linkToken: string;
  scheduledAt: Timestamp | null;
  smsDeliveryStatus: string | null;
  smsProviderMessageId: string | null;
  status: Generated<SurveyStatus>;
  statusUpdatedAt: Timestamp | null;
  surveyType: SurveyType;
  updatedAt: Generated<Timestamp>;
}

export interface Users {
  accessTeamStats: Generated<boolean>;
  clerkId: string | null;
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  email: string | null;
  employeeIdNumber: string | null;
  firstName: string | null;
  /**
   * Corresponding object ID in HubSpot
   */
  hubspotId: Int8 | null;
  /**
   * Relations and events in HubSpot are tied to an "owner" object, which from our perspective is more or less same as users.hubspot_id
   */
  hubspotOwnerId: Int8 | null;
  /**
   * ID of the user. Synchronized with the Clerk.com authentication service
   */
  id: Generated<number>;
  imageUrl: string | null;
  internalDepartmentId: number | null;
  isSystem: Generated<boolean>;
  kpiFromBookedMeeting: Generated<boolean>;
  kpiFromMeeting: Generated<boolean>;
  kpiFromUpdate: Generated<boolean>;
  kpiGoalMeeting: number | null;
  kpiGoalUpdate: number | null;
  lastName: string | null;
  phoneNumber: string | null;
  role: Generated<UserRole>;
  type: UserType | null;
  v1BusinessUnitId: number | null;
  v1Id: number | null;
  v1TypeId: string | null;
}

export interface VideoCallMeetingEvents {
  createdAt: Generated<Timestamp>;
  eventData: Json;
  eventType: string;
  id: Generated<number>;
  interviewTranscriptionId: number;
}

export interface WordpressAuth {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  token: string;
}

export interface DB {
  adchaseJobPosts: AdchaseJobPosts;
  applicationReplies: ApplicationReplies;
  applicationReplyTemplates: ApplicationReplyTemplates;
  applications: Applications;
  bankruptcies: Bankruptcies;
  candidateActivities: CandidateActivities;
  candidateChangelogs: CandidateChangelogs;
  candidateComments: CandidateComments;
  candidateCompanyRelations: CandidateCompanyRelations;
  candidateFiles: CandidateFiles;
  candidateMeetings: CandidateMeetings;
  candidateReferences: CandidateReferences;
  candidateRelationOwners: CandidateRelationOwners;
  candidateRelationTypes: CandidateRelationTypes;
  candidateSources: CandidateSources;
  careerGoals: CareerGoals;
  caseAccessGrants: CaseAccessGrants;
  caseCandidateHistory: CaseCandidateHistory;
  caseCandidates: CaseCandidates;
  caseRequirements: CaseRequirements;
  cases: Cases;
  casesWithPrognosisValueAndPrio: CasesWithPrognosisValueAndPrio;
  companies: Companies;
  companyManagers: CompanyManagers;
  education: Education;
  experiences: Experiences;
  files: Files;
  internalDepartments: InternalDepartments;
  interviewTranscriptions: InterviewTranscriptions;
  kpis: Kpis;
  meta: Meta;
  optionsV1: OptionsV1;
  people: People;
  personOptionsV1: PersonOptionsV1;
  personSkills: PersonSkills;
  pointGoals: PointGoals;
  resultUnits: ResultUnits;
  resumeEducationExperiences: ResumeEducationExperiences;
  resumes: Resumes;
  resumeWorkExperiences: ResumeWorkExperiences;
  roles: Roles;
  savedFilters: SavedFilters;
  skillCategories: SkillCategories;
  skills: Skills;
  surveyQuestionResponses: SurveyQuestionResponses;
  surveyQuestions: SurveyQuestions;
  surveys: Surveys;
  users: Users;
  videoCallMeetingEvents: VideoCallMeetingEvents;
  wordpressAuth: WordpressAuth;
}
